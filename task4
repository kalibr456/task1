import java.util.*;

public class Task1 {
    public static void main(String[] args) {
        System.out.println(nonRepeat("abracadabra"));
        System.out.println(nonRepeat("abababcac"));
    }

    public static String nonRepeat(String str) {
        return removeOverThreeOccurrences(str.toLowerCase());
    }

    private static String removeOverThreeOccurrences(String str) {
        Map<Character, Integer> frequencyMap = new HashMap<>();
        for (char c : str.toCharArray()) {
            frequencyMap.put(c, frequencyMap.getOrDefault(c, 0) + 1);
        }

        StringBuilder result = new StringBuilder();
        for (char c : str.toCharArray()) {
            if (frequencyMap.get(c) <= 3) {
                result.append(c);
            }
        }

        if (result.length() != str.length()) {
            return removeOverThreeOccurrences(result.toString());
        }
        return result.toString();
    }
}
import java.util.ArrayList;
import java.util.List;

public class Task2 {
    public static void main(String[] args) {
        System.out.println(bruteForce(1, 5));
        System.out.println(bruteForce(2, 2));
        System.out.println(bruteForce(5, 3));
    }

    public static List<String> bruteForce(int n, int k) {
        List<String> result = new ArrayList<>();
        if (n > k || k > 5 || k < 1 || n < 1) {
            return result;
        }
        char[] alphabet = new char[k];
        for (int i = 0; i < k; i++) {
            alphabet[i] = (char) ('0' + i);
        }
        generateCombinations(alphabet, new boolean[k], "", n, result);
        return result;
    }

    private static void generateCombinations(char[] alphabet, boolean[] used, String current, int n, List<String> result) {
        if (current.length() == n) {
            result.add(current);
            return;
        }
        for (int i = 0; i < alphabet.length; i++) {
            if (!used[i]) {
                used[i] = true;
                generateCombinations(alphabet, used, current + alphabet[i], n, result); // Рекурсивный вызов
                used[i] = false;
            }
        }
    }
}
import java.util.ArrayList;
import java.util.List;

public class Task3 {
    public static void main(String[] args) {
        int[] decoded = decode("MTUCI", "MKIIT");
        for (int num : decoded) {
            System.out.print(num + " ");
        }
        System.out.println();

        String encoded = encode(new int[]{0, 31, 28, 10, 29}, "MKIIT");
        System.out.println(encoded);  
    }

    public static int[] decode(String str, String key) {
        int[] result = new int[str.length()];
        for (int i = 0; i < result.length; i++) {
            result[i] = (str.charAt(i) ^ key.charAt(i));
        }
        return result;
    }

    public static String encode(int[] arr, String key) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < arr.length; i++) {
            sb.append((char) (arr[i] ^ key.charAt(i)));
        }
        return sb.toString();
    }
}
import java.util.ArrayList;
import java.util.List;

public class Task4 {
    public static void main(String[] args) {
        System.out.println(split("()()()"));
        System.out.println(split("((()))"));
        System.out.println(split("((()))(())()()(()())"));
        System.out.println(split("((())())(()(()()))"));
    }

    public static List<String> split(String str) {
        List<String> result = new ArrayList<>();
        int balance = 0;
        int start = 0;
        for (int i = 0; i < str.length(); i++) {
            if (str.charAt(i) == '(') {
                balance++;
            } else if (str.charAt(i) == ')') {
                balance--;
            }
            if (balance == 0) {
                result.add(str.substring(start, i + 1));
                start = i + 1;
            }
        }
        return result;
    }
}
public class Task5 {
    public static void main(String[] args) {
        System.out.println(shortHand("abbccc"));
        System.out.println(shortHand("vvvvaajaaaaa"));
    }

    public static String shortHand(String str) {
        StringBuilder result = new StringBuilder();
        int count = 1;
        for (int i = 1; i <= str.length(); i++) {
            if (i < str.length() && str.charAt(i) == str.charAt(i - 1)) {
                count++;
            } else {
                result.append(str.charAt(i - 1));
                if (count > 1) {
                    result.append('*').append(count);
                }
                count = 1;
            }
        }
        return result.toString();
    }
}
public class Task6 {
    public static void main(String[] args) {
        System.out.println(convertToRome(8));
        System.out.println(convertToRome(1234));
        System.out.println(convertToRome(52));
    }

    public static String convertToRome(int num) {
        if (num <= 0 || num > 1502) {
            throw new IllegalArgumentException("Число должно быть в диапазоне от 1 до 1502");
        }
        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};
        String[] symbols = {"M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"};

        StringBuilder roman = new StringBuilder();
        for (int i = 0; i < values.length; i++) {
            while (num >= values[i]) {
                roman.append(symbols[i]);
                num -= values[i];
            }
        }
        return roman.toString();
    }
}
import java.util.HashMap;
import java.util.Map;

public class Task7 {
    public static void main(String[] args) {
        System.out.println(uniqueSubstring("31312131"));
        System.out.println(uniqueSubstring("1111111"));
        System.out.println(uniqueSubstring("12223234333"));
    }
    public static String uniqueSubstring(String str) {
        Map<Character, Integer> evenCounts = new HashMap<>();
        Map<Character, Integer> oddCounts = new HashMap<>();
        for (int i = 0; i < str.length(); i++) {
            char digit = str.charAt(i);
            if (i % 2 == 0) {
                evenCounts.put(digit, evenCounts.getOrDefault(digit, 0) + 1);
            } else {
                oddCounts.put(digit, oddCounts.getOrDefault(digit, 0) + 1);
            }
        }
        int maxEven = evenCounts.values().stream().max(Integer::compareTo).orElse(0);
        int maxOdd = oddCounts.values().stream().max(Integer::compareTo).orElse(0);
        if (maxEven > maxOdd) {
            return "чет";
        } else if (maxOdd > maxEven) {
            return "нечет";
        } else {
            return (str.length() > 0 && str.charAt(0) % 2 == 0) ? "чет" : "нечет";
        }
    }
}
import java.util.ArrayList;
import java.util.List;

public class Task8 {
    public static void main(String[] args) {
        int[][] maze1 = {
                {1, 3, 1},
                {1, -1, 1},
                {4, 2, 1}
        };
        System.out.println(labirint(maze1));

        int[][] maze2 = {
                {2, -7, 3},
                {-4, -1, 8},
                {4, 5, 9}
        };
        System.out.println(labirint(maze2));
    }

    public static List<String> labirint(int[][] maze) {
        int n = maze.length;
        if (maze[0][0] < 0 || maze[n - 1][n - 1] < 0) {
            return List.of("Прохода нет");
        }
        int[][] cost = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cost[i][j] = Integer.MAX_VALUE;
            }
        }
        cost[n - 1][n - 1] = maze[n - 1][n - 1];

        for (int i = n - 1; i >= 0; i--) {
            for (int j = n - 1; j >= 0; j--) {
                if (maze[i][j] < 0) continue;
                if (i > 0 && maze[i - 1][j] >= 0) {
                    cost[i - 1][j] = Math.min(cost[i - 1][j], cost[i][j] + maze[i - 1][j]);
                }
                if (j > 0 && maze[i][j - 1] >= 0) {
                    cost[i][j - 1] = Math.min(cost[i][j - 1], cost[i][j] + maze[i][j - 1]);
                }
            }
        }
        if (cost[0][0] == Integer.MAX_VALUE) {
            return List.of("Прохода нет");
        }

        // Восстанавливаем путь
        List<String> path = new ArrayList<>();
        int i = 0, j = 0;
        path.add(String.valueOf(maze[i][j]));
        while (i != n - 1 || j != n - 1) {
            if (i < n - 1 && cost[i + 1][j] + maze[i][j] == cost[i][j]) {
                i++;
            } else if (j < n - 1 && cost[i][j + 1] + maze[i][j] == cost[i][j]) {
                j++;
            }
            path.add(String.valueOf(maze[i][j]));
        }

        return List.of(String.join("-", path), String.valueOf(cost[0][0]));
    }
}
import java.util.Arrays;
import java.util.Comparator;

public class Task9{
    public static void main(String[] args) {
        System.out.println(numericOrder("t3o the5m 1One all6 r4ule ri2ng"));
        System.out.println(numericOrder("re6sponsibility Wit1h gr5eat power3 4comes g2reat"));
    }

     public static String numericOrder(String input) {
        String[] words = input.split(" ");
        String[] result = new String[words.length];
        for (String word : words) {
            int pos = word.replaceAll("\\D+", "").isEmpty() ? 0 : Integer.parseInt(word.replaceAll("\\D+", "")) - 1;
            result[pos] = word.replaceAll("\\d+", "");
        }
        return String.join(" ", result);
    }
}
import java.util.HashMap;
import java.util.Map;

public class Task10 {
    public static void main(String[] args) {
        System.out.println(fibString("CCCABDD")); // Ожидается: true
        System.out.println(fibString("ABC"));     // Ожидается: false
    }
    public static boolean fibString(String input) {
        int[] counts = new int[256];
        for (char ch : input.toCharArray()) {
            counts[ch]++;
        }
        List<Integer> frequencies = new ArrayList<>();
        for (int count : counts) {
            if (count > 0) frequencies.add(count);
        }
        Collections.sort(frequencies);
        for (int i = 2; i < frequencies.size(); i++) {
            if (frequencies.get(i) != frequencies.get(i - 1) + frequencies.get(i - 2)) {
                return false;
            }
        }
        return true;
    }
}  
